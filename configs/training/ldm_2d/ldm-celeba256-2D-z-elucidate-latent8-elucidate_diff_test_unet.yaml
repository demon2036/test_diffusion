{
  "FirstStage": {
      State: {
        target: modules.state_utils.EMATrainState,
        Input_Shape: [ [ 1,256,256,3 ],[ 1, ] ,[ 1,256,256,3 ]],
        Model: {
          target: modules.models.diffEncoder.DiffEncoder,
          params: {
              dim: 64,
              out_channels: 3,
              dim_mults: [ 1, 1, 2, 2, 4, 4 ],
              encoder_type: '2D',
              latent_type: 'double_z',
              encoder_configs: {
                dims: [ 64,128,256,256 ],
                latent: 8,
                dtype: 'bfloat16',
              }
            }
          },
        Optimizer: {
          target: optax.adamw,
          params: {
                learning_rate: 1.0e-4
          }
        },
      },
      "Gaussian": {
        target: modules.score.elucidateAutoEncoder.ElucidateAutoEncoder,
        params: {
          sample_shape: [ 256,256,3 ],
          loss: 'l2',
          num_sample_steps: 32,
          apply_method: modules.models.diffEncoder.DiffEncoder.decode
        },
      }
  },
  "train": {
      image_size: 256,
      batch_size: 64,
#      file_path: '/root/data/latent2D-16',
      file_path: '/root/data/FFHQ256',
      data_type: 'img',
      repeat: 1,
      seed: 43,
      total_steps: 3000000,
      sample_steps: 50000,
      save_path: 'result/Diffusion',
      model_path: 'check_points/Diffusion'

  },
  State: {
    target: modules.state_utils.EMATrainState,
    Input_Shape: [ [ 1,32,32,8 ],[ 1, ] ],
    Model: {
       target: modules.models.experimental.vae_flax.FlaxUNet2DConditionModel,
      params: {
          in_channels: 8,
          out_channels: 8,
          dtype: 'bfloat16',
        }
    },
    Optimizer: {
      target: optax.adamw,
      params: {
        learning_rate: 5.0e-5,
      }
    },
  },
  "Gaussian": {
    target: modules.score.elucidate.ElucidatedDiffusion,
    params: {
      sample_shape: [ 32,32,8 ],
      loss: 'l2',
#      P_mean: 0.0,
#      P_std: 1.0,

      #      timesteps: 1000,
      #      sampling_timesteps: 200,
      #      objective: 'predict_noise',
      #      beta_schedule: 'cosine',
      #      scale_factor: 0.5,
      #      p_loss: False
    },
  }
}